
/**
 *  WARN -  DO NOT MODIFY  - This file is generated by Witchcraftmda. Change TaskDefinition.java instead
 *  Any changes will be overwritten by the next run of the code generator.
 */

package com.td.bbwp.wf;

import javax.persistence.*;
import org.witchcraft.base.entity.FileAttachment;
import org.witchcraft.base.entity.BaseEntity;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.Formula;
import org.hibernate.annotations.IndexColumn;

import javax.validation.constraints.*;

import java.math.BigDecimal;

import java.util.Optional;

import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import org.witchcraft.base.entity.BaseEntity;

@MappedSuperclass

//@Indexed
//@Analyzer(definition = "entityAnalyzer")

public abstract class TaskDefinitionBase extends BaseEntity {

	@NotNull
	@Size(min = 1, max = 50)
	@Column(name = "NAME", unique = false)

	protected String name

	;

	@ManyToOne(optional = false, fetch = FetchType.LAZY, cascade = {CascadeType.MERGE, CascadeType.PERSIST})
	@JoinColumn(name = "CASE_DEFINITION_ID", nullable = false, updatable = true, insertable = true)
	@com.fasterxml.jackson.annotation.JsonIgnore

	protected CaseDefinition caseDefinition

	;

	@OneToMany(mappedBy = "taskDefinition", fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
	@OrderBy("id DESC")

	protected List<Field> fields

			= new ArrayList<Field>()

	;

	public void setName(String name) {
		this.name = name;
	}

	public String getName() {

		return name;
	}

	public void setCaseDefinition(CaseDefinition caseDefinition) {
		this.caseDefinition = caseDefinition;
	}

	public CaseDefinition getCaseDefinition() {

		return caseDefinition;
	}

	public void setFields(List<Field> fields) {
		this.fields = fields;
	}

	public List<Field> getFields() {

		return fields;
	}

	public Field addField(Field field) {

		field.setTaskDefinition((TaskDefinition) this);

		if (this.fields == null) {
			this.fields = new ArrayList<com.td.bbwp.wf.Field>();
		}

		this.fields.add(field);

		return field;
	}

	public void addFields(List<Field> fieldsToAdd) {
		fieldsToAdd.forEach(record -> addField(record));
	}

	@Transient
	public String createListFieldsAsString() {
		return listAsString(fields);
	}

	@Transient
	//Display name
	public String getDisplayName() {
		try {
			return name;
		} catch (Exception e) {
			return "Exception - " + e.getMessage();
		}
	}

	/*
	public List<List<? extends BaseEntity>> getComposites(){
		List lst = new ArrayList();
		lst.addAll(fields);
		
		return lst;
	}
	*/

}
