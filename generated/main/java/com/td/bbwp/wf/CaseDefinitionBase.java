
/**
 *  WARN -  DO NOT MODIFY  - This file is generated by Witchcraftmda. Change CaseDefinition.java instead
 *  Any changes will be overwritten by the next run of the code generator.
 */

package com.td.bbwp.wf;

import javax.persistence.*;
import org.witchcraft.base.entity.FileAttachment;
import org.witchcraft.base.entity.BaseEntity;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.Formula;
import org.hibernate.annotations.IndexColumn;

import javax.validation.constraints.*;

import java.math.BigDecimal;

import java.util.Optional;

import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import org.witchcraft.base.entity.BaseEntity;

@MappedSuperclass

//@Indexed
//@Analyzer(definition = "entityAnalyzer")

public abstract class CaseDefinitionBase extends BaseEntity {

	//@Unique(entityName = "com.td.bbwp.wf.CaseDefinition", fieldName = "NAME")

	@NotNull
	@Size(min = 1, max = 50)
	@Column(name = "NAME", unique = true)

	protected String name

	;

	@OneToMany(mappedBy = "caseDefinition", fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
	@OrderBy("id DESC")

	protected List<TaskDefinition> taskDefinitions

			= new ArrayList<TaskDefinition>()

	;

	@Column(name = "CLOSABLE", unique = false)

	protected Boolean closable

	;

	public void setName(String name) {
		this.name = name;
	}

	public String getName() {

		return name;
	}

	public void setTaskDefinitions(List<TaskDefinition> taskDefinitions) {
		this.taskDefinitions = taskDefinitions;
	}

	public List<TaskDefinition> getTaskDefinitions() {

		return taskDefinitions;
	}

	public TaskDefinition addTaskDefinition(TaskDefinition taskDefinition) {

		taskDefinition.setCaseDefinition((CaseDefinition) this);

		if (this.taskDefinitions == null) {
			this.taskDefinitions = new ArrayList<com.td.bbwp.wf.TaskDefinition>();
		}

		this.taskDefinitions.add(taskDefinition);

		return taskDefinition;
	}

	public void addTaskDefinitions(List<TaskDefinition> taskDefinitionsToAdd) {
		taskDefinitionsToAdd.forEach(record -> addTaskDefinition(record));
	}

	@Transient
	public String createListTaskDefinitionsAsString() {
		return listAsString(taskDefinitions);
	}

	public void setClosable(Boolean closable) {
		this.closable = closable;
	}

	public Boolean getClosable() {

		return closable;
	}

	@Transient
	//Display name
	public String getDisplayName() {
		try {
			return name;
		} catch (Exception e) {
			return "Exception - " + e.getMessage();
		}
	}

	/*
	public List<List<? extends BaseEntity>> getComposites(){
		List lst = new ArrayList();
		lst.addAll(taskDefinitions);
		
		return lst;
	}
	*/

}
